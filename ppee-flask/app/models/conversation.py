from app import db
from datetime import datetime
import json


class Conversation(db.Model):
    """–ú–æ–¥–µ–ª—å –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º"""
    __tablename__ = 'conversations'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # –°–≤—è–∑—å —Å –ø–æ–º–æ—â–Ω–∏–∫–æ–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º application_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    assistant_id = db.Column(db.Integer, db.ForeignKey('applications.id'), nullable=False)
    
    # –°–≤—è–∑—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'), nullable=False)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    title = db.Column(db.String(255))
    status = db.Column(db.String(50), default='active')  # active, archived, deleted
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    message_count = db.Column(db.Integer, default=0)
    total_tokens = db.Column(db.Integer, default=0)
    last_message_at = db.Column(db.DateTime)
    
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    context_summary = db.Column(db.Text)  # –°–≤–æ–¥–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
    settings = db.Column(db.JSON, default=dict)  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–∏–∞–ª–æ–≥–∞ (temperature, max_tokens –∏ —Ç.–¥.)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # –û—Ç–Ω–æ—à–µ–Ω–∏—è
    assistant = db.relationship('Application', backref=db.backref('conversations', lazy='dynamic'))
    user = db.relationship('User', backref=db.backref('conversations', lazy='dynamic'))
    messages = db.relationship('Message', backref='conversation', lazy='dynamic', cascade='all, delete-orphan', order_by='Message.created_at')
    
    def __repr__(self):
        return f'<Conversation {self.id}: {self.title or "Untitled"}>'
    
    def get_last_messages(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return self.messages.order_by(Message.created_at.desc()).limit(limit).all()[::-1]
    
    def get_context_for_llm(self, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        messages = self.get_last_messages(limit)
        context = []
        for msg in messages:
            if msg.role == 'user':
                context.append(f"User: {msg.content}")
            elif msg.role == 'assistant':
                context.append(f"Assistant: {msg.content}")
        return "\n".join(context)
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∏–∞–ª–æ–≥–∞"""
        self.message_count = self.messages.count()
        last_message = self.messages.order_by(Message.created_at.desc()).first()
        if last_message:
            self.last_message_at = last_message.created_at
        db.session.commit()
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            'id': self.id,
            'assistant_id': self.assistant_id,
            'assistant_name': self.assistant.name if self.assistant else None,
            'user_id': self.user_id,
            'title': self.title,
            'status': self.status,
            'message_count': self.message_count,
            'total_tokens': self.total_tokens,
            'last_message_at': self.last_message_at.isoformat() if self.last_message_at else None,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }


class Message(db.Model):
    """–ú–æ–¥–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ"""
    __tablename__ = 'messages'
    
    id = db.Column(db.Integer, primary_key=True)
    
    # –°–≤—è–∑—å —Å –¥–∏–∞–ª–æ–≥–æ–º
    conversation_id = db.Column(db.Integer, db.ForeignKey('conversations.id'), nullable=False)
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    role = db.Column(db.String(20), nullable=False)  # user, assistant, system
    content = db.Column(db.Text, nullable=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    tokens_count = db.Column(db.Integer, default=0)
    processing_time = db.Column(db.Float)  # –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    attachments = db.Column(db.JSON)  # —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    extra_data = db.Column(db.JSON)  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    
    # –î–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ –ø–æ–∏—Å–∫)
    search_results = db.Column(db.JSON)  # —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    search_query = db.Column(db.String(500))  # –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    
    # LLM –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏)
    llm_request = db.Column(db.JSON)  # –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ LLM
    llm_response = db.Column(db.JSON)  # –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
    
    # –û—Ü–µ–Ω–∫–∞ –∏ —Ñ–∏–¥–±–µ–∫
    rating = db.Column(db.Integer)  # –æ—Ü–µ–Ω–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1-5)
    feedback = db.Column(db.Text)  # —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    def __repr__(self):
        return f'<Message {self.id}: {self.role} in conversation {self.conversation_id}>'
    
    def to_dict(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            'id': self.id,
            'conversation_id': self.conversation_id,
            'role': self.role,
            'content': self.content,
            'tokens_count': self.tokens_count,
            'processing_time': self.processing_time,
            'attachments': self.attachments,
            'extra_data': self.extra_data,
            'rating': self.rating,
            'created_at': self.created_at.isoformat()
        }
    
    def get_formatted_content(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.role == 'user':
            return f"üë§ {self.content}"
        elif self.role == 'assistant':
            return f"ü§ñ {self.content}"
        else:
            return f"‚ÑπÔ∏è {self.content}"